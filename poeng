#!/usr/bin/python3
'''
Main source file for poeng game
'''
import sys
import pygame
from ball import Ball
from paddle import Paddle
from text import Text
from infobar import HUD
from pygame.locals import *

# Game attributes
running = False
screen = None
# Find a way to accept width and height (or an enumerated size) as parameters
width = 1500
height = 750
size = (width, height)
clock = pygame.time.Clock()
bgColor = (210,210,210)
music = 'sounds/bgm.ogg'



# Init everything
pygame.mixer.pre_init(44100, 16, 2, 4096)
pygame.init()
pygame.key.set_repeat(1,1)
pygame.mixer.music.load(music)
pygame.mixer.music.play(-1)
meow = pygame.mixer.Sound('sounds/meow.wav')
meow.set_volume(0.2)
screen = pygame.display.set_mode(size, pygame.HWSURFACE | pygame.DOUBLEBUF)
running = True
score = 1
maxScore = score # keep track of highest score

# Game objects
gameObjs = {}
gameObjs['hud'] = HUD(screen)
gameObjs['ball'] = []
gameObjs['paddle'] = Paddle(0,0,size)
objectList = pygame.sprite.Group() # used for sprites
objectList.add(gameObjs['paddle'])

# Add one ball
ball = Ball(500,500, size)
gameObjs['ball'].append(ball)
objectList.add(ball)

# Game objects
def on_event(event):
    global running, gameObjs
    if event.type == pygame.QUIT:
        running = False
    elif event.type == KEYDOWN:
        if event.key == pygame.K_w:
            gameObjs['paddle'].move('up')
        if event.key == pygame.K_s:
            gameObjs['paddle'].move('down')
            
def on_loop():
    global gameObjs, score, maxScore
    balls = gameObjs['ball']
    paddle = gameObjs['paddle']
    hud = gameObjs['hud']

    # check for ball on ball collisions
    ballList = [ball for ball in balls]
    nBalls = len(ballList)
    for i in range(nBalls):
        for j in range(i+1,nBalls):
            if pygame.sprite.collide_rect(ballList[i], ballList[j]):
                ballList[i].catHit()


    for ball in balls:
        if pygame.sprite.collide_rect(ball, paddle):
            meow.play()
            ball.sendHit()
            score += 1
            hud.updateScore(score)
            if maxScore % 5 == 0 and maxScore > 0:
                ball = Ball(500, 900, size)
                gameObjs['ball'].append(ball)
                objectList.add(ball)

        hit = (ball.rect.x, ball.rect.y)
        if ball.findWall(hit) == 'left':
            score -=2
            hud.updateScore(score)
            if score < 0:
                on_cleanup()
    # keep track of max score
    if score > maxScore:
        maxScore = score


def on_render():
    global objectList, gameObjs, screen, clock
    hud = gameObjs['hud']
    drawBackground()
    objectList.draw(screen)
    objectList.update()
    hud.draw()
    clock.tick(100)
    pygame.display.flip()

def on_cleanup():
    global maxScore
    #pygame.quit()
    print(maxScore)
    sys.exit()


def on_execute():
    global running
    while(running):
        for event in pygame.event.get():
            on_event(event)
        on_loop()
        on_render()
    on_cleanup()



def drawBackground():
    global screen, bgColor
    screen.fill(bgColor)

if __name__ == "__main__":
    on_execute()

