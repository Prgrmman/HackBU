#!/usr/bin/python3
'''
Main source file for poeng game
'''

import pygame
from ball import Ball
from paddle import Paddle
from text import Text
from infobar import HUD
from pygame.locals import *

# Game attributes
running = False
screen = None
width = 1280
height = 960
size = (width, height)
clock = pygame.time.Clock()
bgColor = (210,210,210)
music = 'sounds/bgm.mp3'

# Game objects
gameObjs = dict()
gameObjs['hud'] = None
gameObjs['ball'] = None
gameObjs['paddle'] = None
objectList = pygame.sprite.Group() # used for sprites


# Init everything

pygame.init()
pygame.key.set_repeat(1,1)
pygame.mixer.music.load(music)
pygame.mixer.music.play(-1)
screen = pygame.display.set_mode(size, pygame.HWSURFACE | pygame.DOUBLEBUF)
running = True
score = 0

gameObjs['hud'] = HUD(screen)
gameObjs['ball'] = [Ball(500, 500, size)]
gameObjs['paddle'] = Paddle(0,0,size)
objectList.add(gameObjs['paddle'])
objectList.add(gameObjs['ball'][0])

# Game objects
def on_event(event):
    global running, gameObjs
    if event.type == pygame.QUIT:
        running = False
    elif event.type == KEYDOWN:
        if event.key == pygame.K_w:
            gameObjs['paddle'].move('up')
        if event.key == pygame.K_s:
            gameObjs['paddle'].move('down')
            
def on_loop():
    global gameObjs, score
    ball = gameObjs['ball'][0]
    paddle = gameObjs['paddle']
    hud = gameObjs['hud']
    if pygame.sprite.collide_rect(ball, paddle):
        ball.sendHit()
        score += 1
        hud.updateScore(score)


def on_render():
    global objectList, gameObjs, screen, clock
    hud = gameObjs['hud']
    drawBackground()
    objectList.draw(screen)
    objectList.update()
    hud.draw()
    clock.tick(100)
    pygame.display.flip()

def on_cleanup():
    pygame.quit()


def on_execute():
    global running
    while(running):
        for event in pygame.event.get():
            on_event(event)
        on_loop()
        on_render()
    on_cleanup()



def drawBackground():
    global screen, bgColor
    screen.fill(bgColor)

if __name__ == "__main__":
    on_execute()

